name: Terraform

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "dev"
      apply:
        required: false
        type: boolean
        default: false
      site_domain:
        required: true
        type: string
      s3_deploy_zipfile:
        required: true
        type: string
      aws_role:
        required: true
        type: string
      aws_role_apigateway:
        required: true
        type: string
      aws_certificate_arn:
        required: true
        type: string
      source_code_hash:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_environment: ${{ inputs.environment }}
  TF_VAR_site_domain: ${{ inputs.site_domain }}
  TF_VAR_s3_deploy_zipfile: ${{ inputs.s3_deploy_zipfile }}
  TF_VAR_aws_role: ${{ inputs.aws_role }}
  TF_VAR_aws_role_apigateway: ${{ inputs.aws_role_apigateway }}
  TF_VAR_aws_certificate_arn: ${{ inputs.aws_certificate_arn }}
  TF_VAR_source_code_hash: ${{ inputs.source_code_hash }}

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: _iac
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Format
        id: terraform-format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: terraform-init
        run: terraform init -backend-config=backend-config-${{ inputs.environment }}.tfvars
        continue-on-error: true

      - name: Terraform Validate
        id: terraform-validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: terraform-plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Status
        if: steps.terraform-plan.outcome == 'failure' || steps.terraform-validate.outcome == 'failure' || steps.terraform-init.outcome == 'failure' || steps.terraform-format.outcome == 'failure'
        run: exit 1

      - name: Print Status
        run: echo "Terraform Status Success ðŸŽ‰"

      - name: Terraform Apply
        if: ${{ inputs.apply == true }}
        run: terraform apply -auto-approve -input=false
